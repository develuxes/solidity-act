-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParAct where
import AbsAct
import LexAct
import ErrM

}

%name pAct Act
%name pHeader Header
%name pUpdate Update
%name pStorage Storage
%name pLookup Lookup
%name pBExp BExp
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pDecl Decl
%name pTDecl TDecl
%name pType Type
%name pListDecl ListDecl
%name pListTDecl ListTDecl
%name pListLookup ListLookup
%name pListBExp ListBExp
%name pListExp ListExp
%name pListUpdate ListUpdate
%name pListHeader ListHeader
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '.' { PT _ (TS _ 7) }
  '/' { PT _ (TS _ 8) }
  ':' { PT _ (TS _ 9) }
  '<' { PT _ (TS _ 10) }
  '<=' { PT _ (TS _ 11) }
  '=/=' { PT _ (TS _ 12) }
  '==' { PT _ (TS _ 13) }
  '=>' { PT _ (TS _ 14) }
  '>' { PT _ (TS _ 15) }
  '>=' { PT _ (TS _ 16) }
  '[' { PT _ (TS _ 17) }
  ']' { PT _ (TS _ 18) }
  'address' { PT _ (TS _ 19) }
  'all' { PT _ (TS _ 20) }
  'and' { PT _ (TS _ 21) }
  'behaviour' { PT _ (TS _ 22) }
  'bool' { PT _ (TS _ 23) }
  'bytes32' { PT _ (TS _ 24) }
  'false' { PT _ (TS _ 25) }
  'for' { PT _ (TS _ 26) }
  'if' { PT _ (TS _ 27) }
  'iff' { PT _ (TS _ 28) }
  'in' { PT _ (TS _ 29) }
  'int' { PT _ (TS _ 30) }
  'int126' { PT _ (TS _ 31) }
  'int256' { PT _ (TS _ 32) }
  'int8' { PT _ (TS _ 33) }
  'interface' { PT _ (TS _ 34) }
  'of' { PT _ (TS _ 35) }
  'or' { PT _ (TS _ 36) }
  'range' { PT _ (TS _ 37) }
  'returns' { PT _ (TS _ 38) }
  'storage' { PT _ (TS _ 39) }
  'true' { PT _ (TS _ 40) }
  'uint' { PT _ (TS _ 41) }
  'uint126' { PT _ (TS _ 42) }
  'uint256' { PT _ (TS _ 43) }
  'uint8' { PT _ (TS _ 44) }
  '|->' { PT _ (TS _ 45) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Act :: { Act }
Act : ListHeader { AbsAct.Main $1 }
Header :: { Header }
Header : 'behaviour' Ident 'of' Ident { AbsAct.Behave $2 $4 }
       | 'interface' Ident '(' ListDecl ')' { AbsAct.Interf $2 $4 }
       | 'for' 'all' ListTDecl { AbsAct.Quant $3 }
       | 'iff' ListBExp { AbsAct.Iff $2 }
       | 'iff' 'in' 'range' Type ListExp { AbsAct.IffIn $4 $5 }
       | 'if' ListBExp { AbsAct.If $2 }
       | 'storage' ListUpdate { AbsAct.StorageH $2 }
       | 'returns' Exp { AbsAct.Return $2 }
Update :: { Update }
Update : Storage '=>' Exp { AbsAct.Change $1 $3 }
       | Storage { AbsAct.Const $1 }
       | Storage '|->' Exp '=>' Exp { AbsAct.OChange $1 $3 $5 }
       | Storage '|->' Exp { AbsAct.OConst $1 $3 }
Storage :: { Storage }
Storage : Ident ListLookup { AbsAct.Map $1 (reverse $2) }
        | Storage '.' Ident { AbsAct.Struct $1 $3 }
Lookup :: { Lookup }
Lookup : '[' Ident ']' { AbsAct.Look $2 }
BExp :: { BExp }
BExp : BExp 'and' BExp { AbsAct.BAnd $1 $3 }
     | BExp 'or' BExp { AbsAct.BOr $1 $3 }
     | Exp '==' Exp { AbsAct.BEq $1 $3 }
     | Exp '=/=' Exp { AbsAct.BNeq $1 $3 }
     | Exp '<=' Exp { AbsAct.BLEQ $1 $3 }
     | Exp '<' Exp { AbsAct.BLE $1 $3 }
     | Exp '>=' Exp { AbsAct.BGEQ $1 $3 }
     | Exp '>' Exp { AbsAct.BGE $1 $3 }
     | '(' BExp ')' { $2 }
     | 'true' { AbsAct.BTrue }
     | 'false' { AbsAct.BFalse }
Exp :: { Exp }
Exp : Exp '+' Exp1 { AbsAct.EAdd $1 $3 }
    | Exp '-' Exp1 { AbsAct.ESub $1 $3 }
    | '(' Exp ')' { $2 }
    | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp1 '*' Exp2 { AbsAct.EMul $1 $3 }
     | Exp1 '/' Exp2 { AbsAct.EDiv $1 $3 }
     | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Integer { AbsAct.EInt $1 }
     | Storage { AbsAct.EVar $1 }
     | '(' Exp ')' { $2 }
Decl :: { Decl }
Decl : Type Ident { AbsAct.Dec $1 $2 }
TDecl :: { TDecl }
TDecl : Ident ':' Type { AbsAct.TDec $1 $3 }
Type :: { Type }
Type : 'uint' { AbsAct.Type_uint }
     | 'int' { AbsAct.Type_int }
     | 'uint256' { AbsAct.Type_uint256 }
     | 'int256' { AbsAct.Type_int256 }
     | 'uint126' { AbsAct.Type_uint126 }
     | 'int126' { AbsAct.Type_int126 }
     | 'uint8' { AbsAct.Type_uint8 }
     | 'int8' { AbsAct.Type_int8 }
     | 'address' { AbsAct.Type_address }
     | 'bytes32' { AbsAct.Type_bytes32 }
     | 'bool' { AbsAct.Type_bool }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] }
         | Decl { (:[]) $1 }
         | Decl ',' ListDecl { (:) $1 $3 }
ListTDecl :: { [TDecl] }
ListTDecl : TDecl { (:[]) $1 } | TDecl ListTDecl { (:) $1 $2 }
ListLookup :: { [Lookup] }
ListLookup : {- empty -} { [] }
           | ListLookup Lookup { flip (:) $1 $2 }
ListBExp :: { [BExp] }
ListBExp : BExp { (:[]) $1 } | BExp ListBExp { (:) $1 $2 }
ListExp :: { [Exp] }
ListExp : Exp { (:[]) $1 } | Exp ListExp { (:) $1 $2 }
ListUpdate :: { [Update] }
ListUpdate : Update { (:[]) $1 } | Update ListUpdate { (:) $1 $2 }
ListHeader :: { [Header] }
ListHeader : Header { (:[]) $1 } | Header ListHeader { (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

