-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsAct where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Act = Main [Header]
  deriving (Eq, Ord, Show, Read)

data Header
    = Behave Ident Ident
    | Interf Ident [Decl]
    | Quant [TDecl]
    | Iff [BExp]
    | IffIn Type [Exp]
    | If [BExp]
    | StorageH [Update]
    | Return Exp
  deriving (Eq, Ord, Show, Read)

data Update
    = Change Storage Exp
    | Const Storage
    | OChange Storage Exp Exp
    | OConst Storage Exp
  deriving (Eq, Ord, Show, Read)

data Storage = Map Ident [Lookup] | Struct Storage Ident
  deriving (Eq, Ord, Show, Read)

data Lookup = Look Ident
  deriving (Eq, Ord, Show, Read)

data BExp
    = BAnd BExp BExp
    | BOr BExp BExp
    | BEq Exp Exp
    | BNeq Exp Exp
    | BLEQ Exp Exp
    | BLE Exp Exp
    | BGEQ Exp Exp
    | BGE Exp Exp
    | BTrue
    | BFalse
  deriving (Eq, Ord, Show, Read)

data Exp
    = EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EInt Integer
    | EVar Storage
  deriving (Eq, Ord, Show, Read)

data Decl = Dec Type Ident
  deriving (Eq, Ord, Show, Read)

data TDecl = TDec Ident Type
  deriving (Eq, Ord, Show, Read)

data Type
    = Type_uint
    | Type_int
    | Type_uint256
    | Type_int256
    | Type_uint126
    | Type_int126
    | Type_uint8
    | Type_int8
    | Type_address
    | Type_bytes32
    | Type_bool
  deriving (Eq, Ord, Show, Read)

