{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintAct.
--   Generated by the BNF converter.

module PrintAct where

import qualified AbsAct
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsAct.Ident where
  prt _ (AbsAct.Ident i) = doc (showString i)

instance Print AbsAct.Act where
  prt i e = case e of
    AbsAct.Main headers -> prPrec i 0 (concatD [prt 0 headers])

instance Print AbsAct.Header where
  prt i e = case e of
    AbsAct.Behave id1 id2 -> prPrec i 0 (concatD [doc (showString "behaviour"), prt 0 id1, doc (showString "of"), prt 0 id2])
    AbsAct.Interf id decls -> prPrec i 0 (concatD [doc (showString "interface"), prt 0 id, doc (showString "("), prt 0 decls, doc (showString ")")])
    AbsAct.Quant tdecls -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "all"), prt 0 tdecls])
    AbsAct.Iff bexps -> prPrec i 0 (concatD [doc (showString "iff"), prt 0 bexps])
    AbsAct.IffIn type_ exps -> prPrec i 0 (concatD [doc (showString "iff"), doc (showString "in"), doc (showString "range"), prt 0 type_, prt 0 exps])
    AbsAct.If bexps -> prPrec i 0 (concatD [doc (showString "if"), prt 0 bexps])
    AbsAct.StorageH updates -> prPrec i 0 (concatD [doc (showString "storage"), prt 0 updates])
    AbsAct.Return exp -> prPrec i 0 (concatD [doc (showString "returns"), prt 0 exp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsAct.Update where
  prt i e = case e of
    AbsAct.Change storage exp -> prPrec i 0 (concatD [prt 0 storage, doc (showString "=>"), prt 0 exp])
    AbsAct.Const storage -> prPrec i 0 (concatD [prt 0 storage])
    AbsAct.OChange storage exp1 exp2 -> prPrec i 0 (concatD [prt 0 storage, doc (showString "|->"), prt 0 exp1, doc (showString "=>"), prt 0 exp2])
    AbsAct.OConst storage exp -> prPrec i 0 (concatD [prt 0 storage, doc (showString "|->"), prt 0 exp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsAct.Storage where
  prt i e = case e of
    AbsAct.Map id lookups -> prPrec i 0 (concatD [prt 0 id, prt 0 lookups])
    AbsAct.Struct storage id -> prPrec i 0 (concatD [prt 0 storage, doc (showString "."), prt 0 id])

instance Print AbsAct.Lookup where
  prt i e = case e of
    AbsAct.Look id -> prPrec i 0 (concatD [doc (showString "["), prt 0 id, doc (showString "]")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsAct.BExp where
  prt i e = case e of
    AbsAct.BAnd bexp1 bexp2 -> prPrec i 0 (concatD [prt 0 bexp1, doc (showString "and"), prt 0 bexp2])
    AbsAct.BOr bexp1 bexp2 -> prPrec i 0 (concatD [prt 0 bexp1, doc (showString "or"), prt 0 bexp2])
    AbsAct.BEq exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "=="), prt 0 exp2])
    AbsAct.BNeq exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "=/="), prt 0 exp2])
    AbsAct.BLEQ exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "<="), prt 0 exp2])
    AbsAct.BLE exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "<"), prt 0 exp2])
    AbsAct.BGEQ exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ">="), prt 0 exp2])
    AbsAct.BGE exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ">"), prt 0 exp2])
    AbsAct.BTrue -> prPrec i 0 (concatD [doc (showString "true")])
    AbsAct.BFalse -> prPrec i 0 (concatD [doc (showString "false")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsAct.Exp where
  prt i e = case e of
    AbsAct.EAdd exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "+"), prt 1 exp2])
    AbsAct.ESub exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "-"), prt 1 exp2])
    AbsAct.EMul exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "*"), prt 2 exp2])
    AbsAct.EDiv exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "/"), prt 2 exp2])
    AbsAct.EInt n -> prPrec i 2 (concatD [prt 0 n])
    AbsAct.EVar storage -> prPrec i 2 (concatD [prt 0 storage])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsAct.Decl where
  prt i e = case e of
    AbsAct.Dec type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsAct.TDecl where
  prt i e = case e of
    AbsAct.TDec id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsAct.Type where
  prt i e = case e of
    AbsAct.Type_uint -> prPrec i 0 (concatD [doc (showString "uint")])
    AbsAct.Type_int -> prPrec i 0 (concatD [doc (showString "int")])
    AbsAct.Type_uint256 -> prPrec i 0 (concatD [doc (showString "uint256")])
    AbsAct.Type_int256 -> prPrec i 0 (concatD [doc (showString "int256")])
    AbsAct.Type_uint126 -> prPrec i 0 (concatD [doc (showString "uint126")])
    AbsAct.Type_int126 -> prPrec i 0 (concatD [doc (showString "int126")])
    AbsAct.Type_uint8 -> prPrec i 0 (concatD [doc (showString "uint8")])
    AbsAct.Type_int8 -> prPrec i 0 (concatD [doc (showString "int8")])
    AbsAct.Type_address -> prPrec i 0 (concatD [doc (showString "address")])
    AbsAct.Type_bytes32 -> prPrec i 0 (concatD [doc (showString "bytes32")])
    AbsAct.Type_bool -> prPrec i 0 (concatD [doc (showString "bool")])

instance Print [AbsAct.Decl] where
  prt = prtList

instance Print [AbsAct.TDecl] where
  prt = prtList

instance Print [AbsAct.Lookup] where
  prt = prtList

instance Print [AbsAct.BExp] where
  prt = prtList

instance Print [AbsAct.Exp] where
  prt = prtList

instance Print [AbsAct.Update] where
  prt = prtList

instance Print [AbsAct.Header] where
  prt = prtList

