comment "//" ;
comment "/*" "*/" ;

Main. Act ::= [Header] ;


Behave.   Header ::= "behaviour" Ident "of" Ident ;
Interf.   Header ::= "interface" Ident "(" [Decl] ")" ;
Quant.    Header ::= "for all" [TDecl] ;
Iff.      Header ::= "iff" [BExp] ;
IffIn.    Header ::= "iff in range" Type "\n" [IExp] ;
If.       Header ::= "if" [BExp] ;
StorageH. Header ::= "storage" [Update] ;
WhereH.   Header ::= "where" [FuncDef] ;
Return.   Header ::= "returns" IExp  ;


-- New, "abuse of syntax" format
Change. Update ::= Storage "=>" IExp ;
Const. Update ::= Storage ;
-- Old, verbose format
OChange. Update ::= Storage "|->" Exp "=>" Exp ;
OConst. Update ::= Storage "|->" Exp ;

Map.    Storage ::= Ident [Lookup] ;
Struct. Storage ::= Storage "." Ident ;

Look. Lookup ::= "[" Exp "]" ;

--Any expression
Int.   Exp ::= IExp ;
Bool.  Exp ::= BExp ;
Bytes. Exp ::= BYExp ;

--Boolean expressions
--TODO: precedence
BAnd. BExp   ::= BExp "and" BExp ;
BOr. BExp    ::= BExp "or" BExp ;
BEq. BExp    ::= IExp "==" IExp ;
BNeq. BExp   ::= IExp "=/=" IExp ;
BLEQ. BExp   ::= IExp "<=" IExp ;
BLE. BExp    ::= IExp "<" IExp ;
BGEQ. BExp   ::= IExp ">=" IExp ;
BGE. BExp    ::= IExp ">" IExp ;
_. BExp      ::= "(" BExp ")" ;
BTrue. BExp  ::= "true" ;
BFalse. BExp ::= "false" ;
BFunc. BExp  ::= Ident "(" [Exp] ")" ;

--Integer expressions
EAdd. IExp  ::= IExp  "+" IExp1 ;
ESub. IExp  ::= IExp  "-" IExp1 ;
_.    IExp  ::= "(" IExp ")" ;
ITE.  IExp  ::= "if" BExp "then" IExp "else" IExp ;
EMul. IExp1 ::= IExp1 "*" IExp2 ;
EDiv. IExp1 ::= IExp1 "/" IExp2 ;
EMod. IExp1 ::= IExp1 "%" IExp2 ;
Wild. IExp2 ::= "_" ;
EVar. IExp2 ::= Ident ;
EInt. IExp2 ::= Integer ;
--StorageVar. IExp2 ::= Storage ;
IFunc. IExp  ::= Ident "(" [Exp] ")" ;

--Bytes expressions
BYAdd.  BYExp  ::= BYExp "++" BYExp ;
BYFunc. BYExp  ::= Ident "(" [Exp] ")" ;
BYLit.  BYExp2  ::= String ;
BYVar.  BYExp2  ::= Ident ;
Paren.  BYExp3  ::= "(" BYExp ")" ;
Slice.  BYExp  ::= BYExp "[" Integer ".." Integer "]" ;

coercions IExp 2 ;
coercions BYExp 3 ;

Dec. Decl ::= Type Ident ;
TDec. TDecl ::= Ident ":" Type ;

Fun. FuncDef ::= Ident "(" [Ident] ")" "=" Exp ;

rules Type ::= "uint"    | "int"
             | "bytes" Length
             | "bytes"
             | "uint256" | "int256"
             | "uint126" | "int126"
             | "uint8"   | "int8"
             | "address"
             | "bytes32"
             | "bool" ;

Index. Length ::= "[" Integer "]" ;

separator Ident "," ;
separator Decl "," ;
separator Exp "," ;
separator nonempty TDecl "" ;
separator nonempty FuncDef "" ;
separator nonempty Lookup "" ;
separator nonempty BExp "" ;
separator nonempty IExp "" ;
separator nonempty Update "" ;
separator nonempty Header "" ;

