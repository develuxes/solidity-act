comment "//" ;
comment "/*" "*/" ;

Main. Act ::= [RawBehaviour] ;

--TODO: support for `where` sublanguage
--TODO: tx environment variables (CALLER, NUMBER, TIMESTAMP...)
Transition. RawBehaviour ::= "behaviour" Var "of" Var
                          "interface" Var "(" [Decl] ")"
                          [IffH]
                          PostCond ;

Constructor. RawBehaviour ::= "behaviour" Var "of" Var
                          "interface" "constructor" "(" [Decl] ")"
                          [IffH]
                          StorageDecl ;

Layout. StorageDecl ::= "creates"
                         [Assign] ;

-- our variables can start with underscores
token Var ((letter | '_')(letter | digit | '_')*) ;

CaseSplit. PostCond ::= [CaseExpr] ;
Direct. PostCond    ::= Post ;
Case. CaseExpr ::= "case" Expr ":"
                   PostCond ;

-- Behaviour either specify a state transition, a return value,
-- or both
StorageP. Post ::= [Storage] ;
ReturnP.  Post ::= "returns" Expr ;
StorageReturnP. Post ::= [Storage]
                        "returns" Expr ;

--storage headers of this contract
ThisStorage. Storage ::= "storage"
                         StorageH ;

--external storage headers
ExtStorage. Storage ::= "storage" "at" Expr
                        StorageH ;
CreatesExt. Storage ::= "creates" Var "at" Expr
                        [Assign] ;

--Storage headers and return headers may branch into cases:
Leaf. StorageH ::= [Update] ;
NoopLeaf. StorageH ::= "noop" ;


--assignments types storage variables
Assignval. Assign ::= Type Var ":=" Expr ;
Assignmap. Assign ::= Type Var ":=" "[" [Defn] "]" ;
--todo: structs

Iff.   IffH ::= "iff" [Expr] ;
IffIn. IffH ::= "iff in range" Type "\n" [Expr] ;

-- New, concise syntax
Change. Update ::= Expr "=>" Expr ;

--Array expressions (list or maps)
Let. Defn ::= Expr ":=" Expr ;

--Boolean expressions
EAnd.  Expr  ::= Expr "and" Expr ;
EOr.   Expr  ::= Expr "or" Expr ;
EImpl. Expr  ::= Expr "=>" Expr ;
EEq.   Expr  ::= Expr "==" Expr ;
ENeq.  Expr  ::= Expr "=/=" Expr ;
ELEQ.  Expr  ::= Expr "<=" Expr ;
ELE.   Expr  ::= Expr "<" Expr ;
EGEQ.  Expr  ::= Expr ">=" Expr ;
EGE.   Expr  ::= Expr ">" Expr ;
_.     Expr  ::= "(" Expr ")" ;
ETrue. Expr  ::= "true" ;
EFalse. Expr ::= "false" ;

--todo: precedence
--Integer expressions
EAdd. Expr ::= Expr  "+" Expr ;
ESub. Expr ::= Expr  "-" Expr ;
_.    Expr ::= "(" Expr ")" ;
EITE. Expr ::= "if" Expr "then" Expr "else" Expr ;
EMul. Expr ::= Expr "*" Expr ;
EDiv. Expr ::= Expr "/" Expr ;
EMod. Expr ::= Expr "%" Expr ;
EExp. Expr ::= Expr "^" Expr ;
Wild. Expr ::= "_" ;
Zoom. Expr ::= Var "." Expr ;
Func. Expr ::= Var "(" [Expr] ")" ;
-- lookups
Look. Expr ::= Expr "[" Expr "]" ;
--Bytes expressions
ECat.   Expr ::= Expr "++" Expr ;
ESlice. Expr ::= Expr "[" Expr ".." Expr "]" ;
--built in functions
Newaddr.  Expr ::= "newAddr" "(" Expr "," Expr ")";
Newaddr2. Expr ::= "newAddr" "(" Expr "," Expr "," Expr ")";
BYHash.   Expr ::= "keccak256" "(" Expr ")";
BYAbiE.   Expr ::= "abiEncode" "(" Expr ")";
-- terminals
StringLit. Expr ::= String ;
VarLit.    Expr ::= Var ;
IntLit.    Expr ::= Integer ;

Dec. Decl ::= Type Var ;

--more todo obv
rules Type ::= "uint"    | "int"
             | "uint256" | "int256"
             | "uint126" | "int126"
             | "uint8"   | "int8"
             | "address" | "bytes"
             | "bytes32" | "bytes4"
             | "bool"    | "string" ;
ArrayType.   Type ::= Type "[" Integer "]" ;
MappingType. Type ::= "mapping" "(" Type "=>" Type ")" ;
TupleType.   Type ::= "(" [Type] ")" ;
Contract.    Type ::= Var ;

--fragments of where language
Fun. FuncDef ::= Var "(" [Var] ")" "=" Expr ;

separator Var "," ;
separator Decl "," ;
separator Expr "," ;
separator IffH "" ;
separator nonempty Storage "" ;
separator Assign "" ;
separator Type "," ;
separator Defn "," ;
separator nonempty RawBehaviour "" ;
separator nonempty CaseExpr "" ;
separator nonempty FuncDef "" ;
separator nonempty Expr "" ;
separator nonempty Update "" ;
